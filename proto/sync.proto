syntax = "proto3";

package kv;
option go_package = "./proto;kv";

// Sync implements the ability for nodes to be able to identify each other. It is consumed by the store server only
// and not by store clients.
service Sync {
  // Identity provides the identity of the sending node, and receives the target node's identity in return.
  rpc Identify (IdentityMessage) returns (IdentityMessage);
  // Sync provides an end to end stream of sync update messages between two server nodes.
  rpc Sync (stream SyncMessage) returns (stream SyncMessage);
}

// IdentityMessage is the identity of a server node.
message IdentityMessage {
  // StartTime is the nano timestamp the node started up. This is used to programmatically identify nodes.
  int64 start_time = 1;
  // ID identifies the node.
  string id = 2;
  // Name is used to easily identify nodes (human-readable).
  string name = 3;
}

// OperationVariant represents the type of message operation, i.e. update or delete a key.
// TODO: doesn't make sense that this lives here - import from store
enum OperationVariant {
  UPDATE = 0;
  DELETE = 1;
}

// SyncMessage encapsulates an update/delete message for a given key/value pair.
message SyncMessage {
  string key = 1;
  bytes value = 2;
  int64 timestamp = 3;
  OperationVariant operation = 4;
}
